[
  
  {
    "title": "Python Notes from Intro to Machine Learning ‚úÖ",
    "url": "/posts/python-notes-from-intro-to-machine-learning/",
    "categories": "Resources, bugbounty",
    "tags": "python, machinelearning, practice, learning",
    "date": "2023-09-11 22:00:02 +0530",
    





    
    "snippet": "This article is for Demo purposeThe article was originally on this repoI rarely use Python. I only have one repository at Github that is written in Python: iris-flower-classifier. And it was writte...",
    "content": "This article is for Demo purposeThe article was originally on this repoI rarely use Python. I only have one repository at Github that is written in Python: iris-flower-classifier. And it was written two years ago!A few days ago I took this free course from Udacity: Intro to Machine Learning. The machine learning related codes are quite easy to grasp since it simply uses the scikit-learn modules. But most of the supporting Python modules that are provided by this course were like a black-box to me. I had no idea how to download a file in Python or what‚Äôs the difference between a list, a tuple and a dictionary.That‚Äôs why I decided to read all of the provided Python modules and implement it myself. I ended up refactor most of the code so it‚Äôs easier to understand: github.com/risan/intro-to-machine-learning.So here are some notes and snippets of Python that I‚Äôve been collecting so far (I‚Äôm not even halfway through the course üòù). Also, note that the codes here are still using Python version 2.7.Example Table overflow-table                    Markdown        HTML        Rendered Output                            [Example Link](#link)        &lt;a href=\"#link\"&gt;Example Link&lt;/a&gt;        Example Link                    _Be Italic_        &lt;em&gt;Be Italic&lt;em/&gt;        Be Italic                    **Be Bold**        &lt;strong&gt;Be Italic&lt;strong/&gt;        Be Bold            *) resize to see differenceExample Table without-overflow            Markdown      HTML      Rendered Output                  [Example Link](#link)      &lt;a href=\"#link\"&gt;Example Link&lt;/a&gt;      Example Link              _Be Italic_      &lt;em&gt;Be Italic&lt;em/&gt;      Be Italic              **Be Bold**      &lt;strong&gt;Be Italic&lt;strong/&gt;      Be Bold      *) resize to see differenceMain Entry FileSuppose our Python project is stored in /foo/bar directory. And this application has one file that serves as the single entry point. We can name this file __main__.py so we can run this project simply be referencing its directory path:# Referencing its directory.$ python /foo/bar# It's equivalent to this.$ python /foo/bar/__main__.pyImport Python Module DynamicallySuppose we would like to import a Python module dynamically based on a variable value. We can achieve this through the __import__ function:module_name = \"numpy\"__import__(module_name)Multiple Returns in PythonIn Python, it‚Äôs possible for a function or a method to return multiple values. We can do this simply by separating each return value by a comma:def test():    return 100, \"foo\"someNumber, someString = test()Importing Modules Outside of the DirectoryIn order to import a module from outside of the directory, we need to add that module‚Äôs directory path into the current file with sys.path.append. Suppose we have the following directory structure:|--foo| |-- bar.py||-- tools| |-- speak_yoda.pyIf we want to use the speak_yoda.py module within the bar.py, we can do the following:# /foo/bar.pyimport os# Use relative path to tools directory.sys.path.append(\"../tools\")import speak_yodaHowever, this won‚Äôt work if we run the baz.py file from outside of its foo directory:# It works inside of the /foo directory.$ cd /foo$ python bar.py# But it won't work if the code runs from outside of /foo directory.$ python foo/bar.pyTo solve this problem we can refer to the tools directory using its absolute path.# /foo/bar.pyimport osimport sys# Get the directory name for this file.current_dirname = os.path.dirname(os.path.realpath(__file__))# Use the absolute path to the tools directorytools_path = os.path.abspath(os.path.join(dirname, \"../tools\"))sys.path.append(tools_path)import speak_yodaOutputPrint The EmojisIt turns out you can‚Äôt just print an emoji or any other Unicode characters to the console. You need to specify the encoding type beforehand:# coding: utf8print(\"üòÖ\")Pretty PrintWe can use the pprint module to pretty-print Python data structure with a configurable indentation:import pprintpp = pprint.PrettyPrinter(indent=2)pp.pprint(people)Working with PathnameRead more about pathname manipulations in the os.path documentation.Get Filename From URLSuppose the last segment of the URL contains a filename that we would like to download. We can extract this filename with the following code:import osfrom urlparse import urlparseurl = \"https://example.com/foo.txt\"url_components = urlparse(url)filename = os.path.basename(url_components.path) # foo.txtCheck if File ExistsTo check whether the given file path exists or not:import osis_exists = os.path.isfile(\"foo.txt\")Create a Directory if It Does Not ExistsTo create a directory only if it does not exist:import osimport errnotry:    os.makedirs(directory_path)except OSError, e:    if e.errno != errno.EEXIST:        raiseWorking with FilesDownloading a FileWe can use the urllib module to download a file in Python. The first argument is the file URL that we would like to download. The second argument is the optional filename that will be used to store the file.import urlliburllib.urlretrieve(\"https://example.com/foo.txt\", \"foo.txt\")Extracting Tar FileThere‚Äôs a built-in tarfile module that we can use to work with Tar file in Python. To extract the tar.gz file we can use the following code:import tarfile# Open the file.tfile = tarfile.open(\"foo.tar.gz\")# Extract the file to the given path.tfile.extractall(path)We can pass the mode argument to the open method. By default, the mode would be r‚Äîreading mode with transparent compression. There are also other mode options that we can use:  r:gz: Reading mode with gzip compression.  r:: Reading mode without compression.  a: Appending mode without compression.  w: Writting mode without compression.  Checkout other available options in tarfile documentation.Working with ListGenerate a List of Random NumbersUse the for..in syntax to generate a list of random numbers in a one-liner style.import random# Initialize internal state of random generator.random.seed(42)# Generate random points.randomNumbers = [random.random() for i in range(0, 10)]# [0.6394267984578837, 0.025010755222666936, 0.27502931836911926, ...]Pair Values from Two ListsThe built-in zip function can pair values from two lists. However, this zip function will return a list of tuples instead. To get a list of value pairs, we can combine it with for..in syntax:coordinates = [[x, y] for x,y in zip([5,10,15], [0,1,0])]# [[5, 0], [10, 1], [15, 0]]Splitting a ListWe can easily split a list in Python by specifying the starting index and it‚Äôs ending index. Note that the ending index is excluded from the result.We can also specify a negative index. And also note that both of these indices are optional!a = [0,1,2,3,4,5]a[0:3]  # 0,1,2a[1:3]  # 1,2a[2:]   # 2,3,4,5a[:3]   # 0,1,2a[0:-2] # 0,1,2,3a[-2:]  # 4,5a[:]    # 0,1,2,3,4,5Filtering a List In One LineWe can easily filter a list in Python by combining the for..in and the if syntax together:numbers = range(1,11)# Filter even numbers only.[numbers[i] for i in range(0, len(numbers)) if numbers[i] % 2 == 0]# [2, 4, 6, 8, 10]Sorting a List in Ascending OrderIn Python, we can sort a list in ascending order simply by calling the sort method like so:people = [\"John\", \"Alice\", \"Poe\"]people.sort()print(people) # [\"Alice\", \"John\", \"Poe\"]Using Filter Function with a ListJust like its name, we can use the filter function to filter out our list:numbers = range(1, 11)even_numbers = filter(lambda number: number % 2 == 0, numbers)# [2, 4, 6, 8, 10]We can break the above statement into two parts:  lambda number: statement: The first part is the function that we would like to run to every item on the list. number is the variable name we‚Äôd like to use in this function to refer to a single item from the numbers list. The following function body must evaluate to truthy/falsy value‚Äîfalsy means the current item will be removed from the final result.  numbers: The second parameter is the list that we‚Äôd like to filter.Using Reduce with a List of DictionaryWe can use the reduce function to calculate the total of a particular key in a list of a dictionary:items = [{value:10}, {value:20}, {value:50}]# Calculate the total of value key.totalValues = reduce(lambda total, item: total + item[\"value\"], items, 0) # 80It can be broken down into 4 parts:  lambda total: It‚Äôs the variable name that we‚Äôd like to use in the function body to refer to the carried or the accumulative value that will finally be returned.  item: statement: item is the name of the variable we‚Äôd like to use within the function body to refer to the single item in the items list. The following function body will be executed in order to define the accumulative value of total for the next iteration.  items: It‚Äôs the list of item that we would like to ‚Äúreduce‚Äù.  0: The last parameter is optional and it‚Äôs the initial accumulative value for the first iteration.We can also use this reduce function to find a single item from the list. Here‚Äôs an example of code to find the person with the biggest total_payments within the given list of people dictionary.people = [    {\"name\": \"John\", \"total_payments\": 100},    {\"name\": \"Alice\", \"total_payments\": 1000},    {\"name\": \"Poe\", \"total_payments\": 800}]person_biggest_total_payments = reduce(lambda paid_most, person: person if person[\"total_payments\"] &gt; paid_most[\"total_payments\"] else paid_most, people, { \"total_payments\": 0 })# {'name': 'Alice', 'total_payments': 1000}Working with DictionaryLoop Through DictionaryWe can use the itervalues method to loop through a dictionary:for person in people.itervalues():    print(person[\"email_address\"])We can also use the iteritems method if we want to access the key too:for person in people.iteritems():    print(person[0] + \": \" + person[1][\"email_address\"])Calculate Total of Particular Dictionary KeySuppose we would like to calculate the total amount of salary key on a people dictionary. We can extract the salary key and use the sum function to get the total:total_salary = sum([person[\"salary\"] for person in people.itervalues()])Working with NumpyNumpy Create Range of Values with The Given IntervalUse the arange method to create an array with an evenly spaced interval.import numpy as npnp.arange(0, 5, 1)# array([0,1,2,3,4])np.arange(1, 4, 0.5)# array([1. , 1.5, 2. , 2.5, 3. , 3.5])Numpy Create Coordinate Matrices from Coordinate VectorsWe can use the Numpy meshgrid method to make coordinate matrices from one-dimentional coordinate arrays.import numpy as npnp.meshgrid([1, 2, 3], [0, 7])# [#   array([[1,2,3], [1,2,3]]),#   array([[0,0,0], [7,7,7]])# ]Flatten Numpy ArrayWhen we have a multi-dimensional Numpy array, we can easily flatten it with the ravel method:import numpy as nparr = np.array([[1,2], [3,4]])arr.ravel()# array([1, 2, 3, 4])Pairing Array Values with Second AxisWe can use Numpy c_ function to pair array values with another array that will be it‚Äôs second axis. Read the numpy.c_ documentation.import numpy as npx = [1,2]y = [10,20]np.c_[x, y]# array([1,10], [2,20])Generate Coordinates Across The GridWith the knowledge of Numpy arange, meshgrid, ravel and c_ methods, we can easily generate an evenly spaced coordinates across the grid so we can pass it to the classifier and plot the decision surface.import numpy as np# Generate an evenly spaced coordinates.x_points, y_points = np.meshgrid(np.arange(x_min, x_max, step), np.arange(y_min, y_max, step))# Pair the x and y points.test_coordinates = np.c_[x_points.ravel(), y_points.ravel()]Plotting the DataPlot The Surface DecisionWe can pass an evenly spaced coordinates across the grid to the classifier to predict the output on each of that coordinate. We can then use matplotlib.pyplot to plot the surface decision.import matplotlib.pyplot as pltimport pylab as pl# Pass coordinates across the grid.predicted_labels = classifier.predict(test_coordinates)# Don't forget to reshape the output array dimension.predicted_labels = predicted_labels.reshape(x_points.shape)# Set the axes limit.plt.xlim(x_points.min(), x_points.max())plt.ylim(y_points.min(), y_points.max())# Plot the decision boundary with seismic color map.plt.pcolormesh(x_points, y_points, predicted_labels, cmap = pl.cm.seismic)The classifier output would be a one-dimensional array, so don‚Äôt forget to reshape it back into a two-dimensional array before plotting. The cmap is an optional parameter for the color map. Here we use the seismic color map from pylab module. It has the red-blue colors.Scatter PlotWe need to separate the test points based on its predicted label (the speed). So we can plot the test points with two different colors.# Separate fast (label = 0) &amp; slow (label = 1) test points.grade_fast = [features_test[i][0] for i in range(0, len(features_test)) if labels_test[i] == 0]bumpy_fast = [features_test[i][1] for i in range(0, len(features_test)) if labels_test[i] == 0]grade_slow = [features_test[i][0] for i in range(0, len(features_test)) if labels_test[i] == 1]bumpy_slow = [features_test[i][1] for i in range(0, len(features_test)) if labels_test[i] == 1]# Plot the test points based on its speed.plt.scatter(grade_fast, bumpy_fast, color = \"b\", label = \"fast\")plt.scatter(grade_slow, bumpy_slow, color = \"r\", label = \"slow\")# Show the plot legend.plt.legend()# Add the axis labels.plt.xlabel(\"grade\")plt.ylabel(\"bumpiness\")# Show the plot.plt.show()If we want to save the plot into an image, we can use the savefig method instead:plt.savefig('scatter_plot.png')Dealing with DataDeserializing Python ObjectWe can use pickle module for serializing and deserializing Python object. There‚Äôs also the cPickle‚Äîthe faster C implementation. We use both of these modules to deserialize the email text and author list.import pickleimport cPickle# Unpickling or deserializing the texts.texts_file_handler = open(texts_file, \"r\")texts = cPickle.load(texts_file_handler)texts_file_handler.close()# Unpickling or deserializing the authors.authors_file_handler = open(authors_file, \"r\")authors = pickle.load(authors_file_handler)authors_file_handler.close()Split Data for Training and TestingWe can use the built-in train_test_split function from scikit-learn to split the data both for training and testing.from sklearn.model_selection import train_test_splitfeatures_train, features_test, labels_train, labels_test = train_test_split(texts, authors, test_size = 0.1, random_state = 42)The test_size argument is the proportion of data to split into the test, in our case we split 10% for testing.Vectorized the StringsWhen working with a text document, we need to vectorize the strings into a list of numbers so it‚Äôs easier and more efficient to process. We can use the TfidfVectorizer class to vectorize the strings into a matrix of TF-IDF features.from sklearn.feature_extraction.text import TfidfVectorizervectorizer = TfidfVectorizer(sublinear_tf = True, max_df = 0.5, stop_words = \"english\")features_train_transformed = vectorizer.fit_transform(features_train)features_test_transformed = vectorizer.transform(features_test)Word with a frequency higher than the max_df will be ignored. Stop words are also ignored‚Äîstop words are the most common words in a language (e.g. a, the, has).Feature SelectionText can have a lot of features thus it may slow to compute. We can use scikit SelectPercentile class to select only the important features.selector = SelectPercentile(f_classif, percentile = 10)selector.fit(features_train_transformed, labels_train)selected_features_train_transformed = selector.transform(features_train_transformed).toarray()selected_features_test_transformed = selector.transform(features_test_transformed).toarray()The percentile is the percentage of features that we‚Äôd like to select based on its highest score.This article is for Demo purposeThe article was originally on this repo"
  },
  
  {
    "title": "Cara ribet memperbarui forked repo",
    "url": "/posts/cara-memperbarui-fork-repository/",
    "categories": "Resources, bugbounty",
    "tags": "tips, git, software",
    "date": "2020-01-28 23:30:00 +0530",
    





    
    "snippet": "Berawal dari saya pengen memperbarui repo yang tua dari suatu organisasi, niatnya pengen rumat ulang nih, ternyata dari orginal reponya ada update, sekalian buat artikel deh, lebih kurang gambarany...",
    "content": "Berawal dari saya pengen memperbarui repo yang tua dari suatu organisasi, niatnya pengen rumat ulang nih, ternyata dari orginal reponya ada update, sekalian buat artikel deh, lebih kurang gambaranya seperti ini.Fig 1. Gambaran ribetnya.Ada dua cara untuk memperbarui forked repository menggunakan web interface yang disediakan oleh github tapi ribet, atau melalui terminal yang lebih ribet lagi.Melalui Github (boring way) üíª  Buka repo yang hasil fork di Github.  Klik Pull Requests di sebelah kanan, lalu New Pull Request.  Akan memunculkan hasil compare antara repo upstream dengan repo kamu(forked repo), dan jika menyatakan ‚ÄúThere isn‚Äôt anything to compare.‚Äù, tekan link switching the base, yang mana sekarang repo kamu(forked repo) akan dibalik menjadi base repo dan repo upstream menjadi head repo.  Tekan Create Pull Request, beri judul pull request, Tekan Send Pull Request.  Tekan Merge Pull Request dan Confirm Merge.* pastikan kamu tidak merubah apapun pada forked repo, supaya melakukan merge secara otomatis, kalo tidak ya paling2 konflik.Melalui terminal ‚å®Ô∏èTambahkan remote alamat repository yang aslinya disini tak beri nama upstream., ganti ORIGINAL_OWNER dan ORIGINAL_REPO dengan alamat repo aslimu.$ git add remote upstream git@github.com:ORIGINAL_OWNER/ORIGINAL_REPO.git$ git remote -v&gt; origin    git@github.com:piharpi/www.git (fetch) # forked repo&gt; origin    git@github.com:piharpi/www.git (push) # forked repo&gt; upstream    git@github.com:ORIGINAL_OWNER/ORIGINAL_REPO.git (fetch) # upstream repo / original repo&gt; upstream    git@github.com:ORIGINAL_OWNER/ORIGINAL_REPO.git (push) # upstream repo / original repoCheckout ke local branch master.$ git checkout master&gt; Switched to branch 'master'Jika sudah, Merge local repo dengan remote upstream/master.$ git merge upstream/masterTerakhir push local repo ke remote origin.$ git add -A$ git commit -m \"updating origin repo\" &amp;&amp; git push -u origin masterSelamat mencoba cara ribet ini, semoga bisa dipahami, saya sendiri lebih senang melalui terminal, klo ada yang ribet kenapa cari yang mudah.Resources  Syncing a fork  Update your fork directly on Github"
  },
  
  {
    "title": "What is a shell? üêö adalah kerang ajaib?",
    "url": "/posts/apa-itu-shell/",
    "categories": "Linux, Learning",
    "tags": "unix/linux, cli",
    "date": "2020-01-25 10:28:47 +0530",
    





    
    "snippet": "Dulu Sebelum adanya GUI cara user berinteraksi dengan komputer menggunakan CLI yaitu mengetik baris perintah pada sebuah antarmuka dalam bentuk baris teks seperti üëá.Fig 1. Terminal emulator, instal...",
    "content": "Dulu Sebelum adanya GUI cara user berinteraksi dengan komputer menggunakan CLI yaitu mengetik baris perintah pada sebuah antarmuka dalam bentuk baris teks seperti üëá.Fig 1. Terminal emulator, instalasi package dan check service.Jika kamu pernah menggunakan unix/linux mungkin pernah menggunakan program diatas, bahkan mungkin setiap hari menggunakannya untuk mengeksekusi suatu perintah melalui terminal emulator.User[1] tidak bisa secara langsung berkomunikasi dengan sebuah hardware komputer, maka dari itu kita membutuhkan sebuah sistem operasi; Kernel adalah program yang merupakan inti utama dari sistem operasi komputer.Fig 2. bagan kernel.Kernel memfasilitasi interaksi antara komponen perangkat keras dan perangkat lunak, berperan untuk menangani permintaan input/ouput dari perangkat lunak, selanjutnya menerjemahkannya ke dalam pemrosesan data untuk diintruksikan ke CPU, sehingga Hardware(cpu, memory, devices) mengerti perintah yang dimaksud dari pengguna.Ketika kita menginputkan suatu perintah pada terminal emulator, kernel tidak langsung mengerti perintah yang kita ketik, kita membutuhkan suatu interface sebagai perantara menuju kernel yaitu Shell.Fig 3. bagan komunikasi shell.Shell adalah sebuah command-line interpreter; program yang berperan sebagai penerjemah perintah yang diinputkan oleh User yang melalui terminal, sehingga perintah tersebut bisa dimengerti oleh si Kernel.Login shell biasanya ditetapkan oleh local System Administrator ketika pada saat pertama user kamu dibuat, kamu bisa lihat login shell yang sedang kamu gunakan dengan perintah dibawah ini.$ echo $SHELL# atau$ echo $0Setiap shell mempunyai default prompt. beberapa shell yang paling umum:$ (dollar sign)   # sh, ksh, bash% (percent sign)  # csh, tcshTerminologi pada shell promptShell prompt adalah tempat dimana kita menuliskan suatu perintah, berikut adalah terminologinya ini membantu, jika kamu ingin mengetahui bagian-bagianya.Fig 4. bagian-bagin dari shell prompt.Dibawah ini salah satu contoh perintah sederhana untuk menampilkan sebuah arsitektur CPU komputer yang sedang saya gunakan.Fig 5. menampilkan informasi tentang arsitektur CPU.Dari perintah yang contohkan, ketika user mengetikan suatu inputan perintah di terminal dan menekan ENTER, maka shell akan mengubah perintah user menjadi bahasa yang bisa dipahami oleh kernel, dan Kernel menerjemahkannya ke dalam pemrosesan data untuk diintruksikan ke Hardware sehingga menghasilkan output yg sesuai dengan perintah user.Shell mempunyai beberapa macam dan turunan, berikut yang paling umum.Fig 6. evaluasi shell dari tahun ke tahun.Sedikit penjelasan dari gambar diatas.  Bourne shell shDikembangkan oleh Stephen Bourne di Bell Labs, yang kala itu sebagai pengganti Thompson shell(diciptakan Ken Thompson), banyak sistem unix-like tetap memiliki /bin/sh‚Äîyang mana menjadi symbolic link atau hard link, bahkan ketika shell lain yang digunakan tetap sh adalah sebagai dasarnya, sebagai kompatibilitas perintah.  Korn shell ksh Unix shell yang dikembangkan oleh David Korn di Bell Labs,inisialiasi pengembangan ini berdasar pada source code Bourne shell, namun juga memiliki fitur csh dan sh, pengembanganya pun pada saat saya menulis ini pun terus terawat.  Bourne again shell bashadalah proyek ini open source GNU project memilki kompatibel dengan sh yang menggabungkan fitur penting dari ksh dan csh, dan menjadi salah satu shell yang paling umum digunakan (umumnya menjadi default shell login Linux dan Apple‚Äôs macOS Mojave).  Z shell zsh ini mempunyai wadah komunitasnya disebutnya ‚ÄúOh My Zsh‚Äù, plug-in dan theme zsh bisa kita temukan di komunitas ini, saya saat ini menggunakan zsh, shell ini juga menjadi default dari sistem operasi macOS Catalina, yang menggantikan bash.  friendly interactive shell fishyah sesuai dengan deskripsi di web nya, menurut saya shell ini fun banget, fitur yang saya sukai dari shell ini autosuggestions, dan konfigurasi yang mudah melalui web based.Masih banyak yang belum dijelaskan pada tulisan ini jika masih tertarik, baca lebih banyak dan juga komparasinya masing-masing shell.Jika kamu tertarik untuk mengubah default shell login pada sistem operasi, kamu bisa menginstall dengan cara mengikuti didokumentasi/cara penginstallan dimasing-masing shell disini saya tidak membahas karena distro yang kita pakai mungkin berbeda-beda.Untuk menjadikan default shell login pada OS bisa menggunakan perintah ini.# command$ sudo chsh [options] [LOGIN]# contoh penggunaan$ sudo chsh -s /user/bin/zsh harpi# mengubah default shell user harpi menjadi zsh shell.$ reboot# atau kamu juga bisa mengubah file /etc/passwd dan edit secara manual user shellnya.# jika masih bingung manfaatkan perintah man untuk melihat manual page.$ man chshTerakhir untuk tulisan ini, shell memilki berbagai macam, pilihlah shell yang sesuai dengan keinginanmu untuk menunjang produktivitas dan sesuaikan dengan kebutuhan, terlalu banyak plugin dan kebingungan memilih tema itu buruk üòÅ.Terimakasih sudah baca, penulis menerima kritik dan saran.Notes[1] Manusia yang mengoperasikan dan mengendalikan sistem komputer.Resources  Evolution shells in Linux  Kernel Defintion  The Shell"
  },
  
  {
    "title": "React Component with Dot Notation",
    "url": "/posts/react-component-with-dot-notation/",
    "categories": "Resources, Learning, Programming",
    "tags": "javascript, react, practice, learning",
    "date": "2018-04-07 21:34:00 +0530",
    





    
    "snippet": "This article is for Demo purposeThe article was originally on this repoThis is my answer to someone‚Äôs question on StackOverflow. How can we define a React component that is accessible through the d...",
    "content": "This article is for Demo purposeThe article was originally on this repoThis is my answer to someone‚Äôs question on StackOverflow. How can we define a React component that is accessible through the dot notation?Take a look at the following code. We have the Menu component and its three children Menu.Item:const App = () =&gt; (  &lt;Menu&gt;    &lt;Menu.Item&gt;Home&lt;/Menu.Item&gt;    &lt;Menu.Item&gt;Blog&lt;/Menu.Item&gt;    &lt;Menu.Item&gt;About&lt;/Menu.Item&gt;  &lt;/Menu&gt;);How can we define a component like Menu? Where it has some kind of ‚Äúsub-component‚Äù that is accessible through a dot notation.Well, it‚Äôs actually a pretty common pattern. And it‚Äôs not really a sub-component, it‚Äôs just another component being attached to another one.Let‚Äôs use the above Menu component for example. We‚Äôll put this component to its own dedicated file: menu.js. First, let‚Äôs define these two components separately on this module file:// menu.jsimport React from 'react';export const MenuItem = ({ children }) =&gt; &lt;li&gt;{children}&lt;/li&gt;;export default const Menu = ({ children }) =&gt; &lt;ul&gt;{children}&lt;/ul&gt;;It‚Äôs just a simple functional component. The Menu is the parent with ul tag. And the MenuItem will act as its children. Now we can use these two components like so:import React from \"react\";import { render } from \"react-dom\";import Menu, { MenuItem } from \"./menu\";const App = () =&gt; (  &lt;Menu&gt;    &lt;MenuItem&gt;Home&lt;/MenuItem&gt;    &lt;MenuItem&gt;Blog&lt;/MenuItem&gt;    &lt;MenuItem&gt;About&lt;/MenuItem&gt;  &lt;/Menu&gt;);render(&lt;App /&gt;, document.getElementById(\"root\"));Where‚Äôs the dot notation? To make our MenuItem component accessible through the dot nation, we can simply attach it to the Menu component as a static property. To do so, we can no longer use the functional component for Menu and switch to the class component instead:// menu.jsimport React, { Component } from 'react';export default const MenuItem = ({ children }) =&gt; &lt;li&gt;{children}&lt;/li&gt;;export default class Menu extends Component {  static Item = MenuItem;  render() {    return (      &lt;ul&gt;{this.props.children}&lt;/ul&gt;    );  }}Now we can use the dot notation to declare the MenuItem component:import React from \"react\";import { render } from \"react-dom\";import Menu from \"./menu\";const App = () =&gt; (  &lt;Menu&gt;    &lt;Menu.Item&gt;Home&lt;/Menu.Item&gt;    &lt;Menu.Item&gt;Blog&lt;/Menu.Item&gt;    &lt;Menu.Item&gt;About&lt;/Menu.Item&gt;  &lt;/Menu&gt;);render(&lt;App /&gt;, document.getElementById(\"root\"));You can also put the MenuItem component definition directly within the Menu class. But this way you can no longer import MenuItem individually.import React, { Component } from \"react\";export default class Menu extends Component {  static Item = ({ children }) =&gt; &lt;li&gt;{children}&lt;/li&gt;;  render() {    return &lt;ul&gt;{this.props.children}&lt;/ul&gt;;  }}This article is for Demo purposeThe article was originally on this repo"
  }
  
]

